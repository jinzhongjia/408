* 输入/输出系统

** IO 控制方式

四种：

1. 程序查询方式
2. 程序中断方式
3. DMA 方式
4. 通道方式

** I/O 接口
主要功能：进行地址译码和设备选择、实现主机和外设的通信联络控制、实现数据缓冲、信号格式的转换、传送控制命令和状态信息

** IO 端口

指的是可以被 cpu 直接访问的寄存器，有数据端口、状态端口、控制端口

分为两种编址方式：存储器统一编址、独立编址。

*** 统一编址（内存映射I/O）

**** 概念
统一编址是指I/O设备和内存共享同一个地址空间。I/O设备的寄存器和内存地址一样被处理器访问，通过普通的内存读写指令来进行I/O操作。

**** 优点
统一编程模型：I/O设备和内存使用相同的指令和机制进行访问，使编程模型更为简单。
无须专用指令：不需要额外的I/O指令，使用普通的加载（load）和存储（store）指令即可访问I/O设备。
灵活性：支持对I/O设备寄存器进行复杂的内存操作，例如指针运算等。

**** 缺点
地址空间冲突：I/O设备会占用一部分内存地址空间，从而减少了可用的内存地址空间，特别是在32位系统中，地址空间相对有限。
性能问题：由于I/O设备与内存共用总线，可能导致内存访问和I/O操作之间的竞争，从而影响性能。

*** 独立编址（I/O映射）

**** 概念
独立编址是指I/O设备使用一个独立于内存的地址空间。处理器通过特定的I/O指令（如x86中的IN和OUT指令）访问I/O设备。

**** 优点
独立的地址空间：I/O设备拥有独立的地址空间，不占用内存的地址空间，允许更多的内存用于程序和数据。
避免地址冲突：I/O设备与内存分离，避免了地址空间冲突的问题。

**** 缺点
额外的I/O指令：需要特定的I/O指令来访问设备，增加了指令集的复杂性。
编程复杂度：开发人员必须使用不同的指令来处理内存和I/O设备，增加了编程复杂度。
灵活性较低：相比内存映射，独立编址的I/O操作不支持复杂的内存操作。

** I/O 方式

*** 程序查询方式

同时包含一个数据缓冲寄存器和一个设备状态寄存器。

**** 工作原理

在程序查询方式中，CPU会循环检查I/O设备的状态寄存器，以确定设备是否准备好进行数据传输。这一过程可以分为以下几个步骤：

初始化：CPU发送命令或地址信息给I/O设备，指示其准备数据传输。

查询状态：CPU不断地读取设备的状态寄存器，检查设备是否处于“准备好”的状态（通常是通过状态寄存器的某个标志位来表示）。

数据传输：一旦设备准备好，CPU将数据从内存传送到I/O设备，或将数据从I/O设备传送到内存。

重复查询：传输完成后，CPU可能需要再次查询设备，进行下一次传输。

结束：当所有需要的数据传输完成后，程序查询过程结束，CPU恢复执行其他任务。

**** 优点
简单性：程序查询方式相对简单，不需要复杂的硬件或中断机制。实现容易，硬件开销低。

实时性：在查询频率足够高的情况下，可以获得较好的实时响应，适用于对时序要求严格的简单系统。

**** 缺点

低效率：CPU在等待I/O设备准备就绪时，会浪费大量时间在循环查询上，这使得CPU无法处理其他任务，降低了系统的整体效率。

资源浪费：尤其是在设备准备时间较长的情况下，CPU被迫一直忙于查询，无法并行处理其他操作，这会导致资源的浪费。

适用性有限：程序查询方式适合简单、低速的设备。对于高速设备或需要并行处理任务的系统，程序查询方式可能无法满足性能需求。

**** 应用场景

程序查询方式常用于一些简单的嵌入式系统或单任务环境中，以下是少量例子。

简单的嵌入式控制系统：在这类系统中，CPU的主要任务是与某个I/O设备交互，因此程序查询方式可以满足需求。

低速设备：如串行端口、键盘等，这些设备的数据传输速率较低，查询方式的性能影响不大。

*** 程序中断方式

程序中断是指在计算机执行现行程序的过程中，出现某些急需处理的异常情况或特殊请求，CPU 暂时中止现行程序，而转去对这些异常情况或特殊请求进行处理，处理完毕后再返回到现行程序的断点处，继续执行原程序。早期的中断技术是为了处理数据传送。

**** 主要功能

1. 实现 CPU 和 I/O 设备的并行工作
2. 处理硬件故障和软件错误
3. 人机交互，用户干预机器需要使用中断系统
4. 实现多道程序，分时操作
5. 实时处理需要中断系统
6. 实现应用程序和操作系统（管态程序）的切换
7. 多处理器系统各处理器之间的信息交流和任务切换

**** 程序中断的工作流程


***** 中断请求

中断系统会对每个中断源设置中断请求标记触发器，状态为 1 时代表有中断源请求终端，这些触发器可组成中断请求标记寄存器。

INTR 发出的是可屏蔽中断，而 NMI 和内部异常均是不可屏蔽中断（在关中断的情况下仍然会被响应）

***** 中断响应判优

不可屏蔽中断 > 内部异常 > 可屏蔽中断

硬件中断 > 软件中断

DMA 中断请求优先于 I/O 设备传送的中断请求

在 I/O 传送类请求中，高速设备优先于低速设备，输入设备优先于输出设备，实时设备优先于普通设备。

***** CPU 响应中断的条件

#+begin_quote
CPU 在每条指令结束前查询是否有中断
#+end_quote

1. 有中断请求

2. CPU 允许中断以及开中断

3. 一条指令执行完毕，并且没有更紧迫的任务

***** 中断响应过程

CPU 响应中断后，经过某些操作，就会才转去执行中断服务程序。这些程序是由硬件直接实现的，称之为 *中断隐指令* ，仅仅是一种虚拟的说法，本质是硬件的一系列自动操作。

1. 关中断

2. 保存断点

3. 引出中断服务程序
   识别中断源，将对应的服务程序入口地址送入程序计数器 PC。
   两种方式来识别中断源：硬件向量法和软件查询法。

***** 中断向量

CPU 响应中断后，识别中断源取到中断类型号，然后根据此计算基础对应中断向量的地址；再根据该地址从中断向量表取出中断服务程序入口程序的地址，送入 PC 寄存器中，然后开始执行中断服务程序。

***** 中断处理过程

1. 关中断
2. 保存断点
3. 中断服务程序寻址
4. 保存现场和屏蔽字
5. 开中断，允许嵌套中断
6. 执行中断服务程序
7. 关中断，保证再恢复现场和屏蔽字时不会被干扰
8. 恢复现场和屏蔽字
9. 开中断、中断返回

前三点由中断隐指令完成，后续由中断服务程序完成

**** 多重中断和中断屏蔽技术

中断嵌套，需要：

1. 在中断服务程序中提前设置开中断指令
2. 优先级高的中断源有权中断优先级低的中断源

现代计算机一般使用中断屏蔽技术，每个中断源包含一个屏蔽触发器，1 表示屏蔽该中断源的请求，0 表示接受。所有屏蔽触发器组合在一起构成一个屏蔽字寄存器，屏蔽字寄存器的内容称为屏蔽字。

*** DMA 方式

DMA 由硬件实现进行成组信息传送。DMA 在外设和内存中间开辟一条直接数据通道。

数据传送不经过 CPU，降低 CPU 在传送数据时的开销。

因此称为直接存储器存取方式。

**** 特点

DMA 接口和主机存在一个直接数据通路，传送数据不经过 CPU，所以 I/O 可以和主机并行，程序和传送并行工作。

DMA 在传送开始前通过程序进行预处理，结束后通过中断方式进行后处理。

**** DMA 控制器的组成

在 DMA 方式中，对数据传送过程进行控制的硬件成为 DMA 控制器。当 I/O 设备需要进行数据传送时，通过 DMA 控制器向 CPU 提出 DMA 传送请求，CPU 响应后让出系统总线，由 DMA 控制器接管总线进行数据传送。

主要功能：

1. 接受外设的 DMA 请求，向 CPU 发出总线请求
2. CPU 相应并发出总线响应信号，DMA 接管总线控制权，进入 DMA 操作周期
3. 确定传送数据的主存单元地址和长度，并主动修改主存地址计数和传送长度计数
4. 规定数据在主存和外设间的传送方向，发出读写等控制信号，执行数据传送操作
5. 向 CPU 报告 DMA 操作结束

在 DMA 传送过程中，DMA 控制器将接管 CPU 的地址总线、数据总线、控制总线，CPU 的主存控制信号将被禁止使用。当 DMA 传送结束后，恢复 CPU 的一切权力并继续操作。

因此，DMA 控制器具有控制系统总线的能力。

**** 传送方式

主存和 I/O 设备之江交换信息时，不通过 CPU。但是当 I/O 设备和 CPU 同时访问主存时，可能发生冲突，为了有效使用主存，DMA 控制器与 CPU 通常采用以下 3 种方式使用主存：

1. 停止 CPU 访存
2. 周期挪用，优先让 DMA 传输数据（但是需要等待存取周期结束后），I/O 必须立刻访存，不然数据就会发生丢失
3. DMA 与 CPU 交替访存，适用于 CPU 的工作周期比主存存取周期长的情况

**** 传送过程

DMA 请求的响应可以发生在任何一个机器周期结束后（取址、间址、执行周期后即可）

1. 预处理
   CPU 需要测试一下 I/O 设备的状态，初始化 DMA 寄存器中的相关寄存器，设置传送方向
2. 数据传送
   可以以字节或者块的方式传送，该阶段完全由 DMA（硬件）控制
3. 后处理
   CPU 执行中断处理，例如验证数据是否正确，传送过程中是否出错

*** 中断方式和 DMA 方式的区别

1. 中断需要保存现场，DMA 不需要

2. DMA 请求高于中断请求

3. 中断方式使用软件，DMA 使用硬件

4. DMA 不需要 CPU 干预，而中断需要
