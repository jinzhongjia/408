* 数据的表示和运算

小数转为二进制，采用乘积取整法。

[[file:image/image_20240902_104307.png]]

** BCD 码

8421 码：从高到低四位权值就是 8、4、2、1，如果结果大于10，需要加 6 修正（加0110）。

余 3 码：每个数都多余3。

2421 码：从高到低四位权值就是 2、4、2、1，大于5的四位二进制码最高位是1，小于5的是0。

** ASCII 码

一共128个字符，也就是0 - 127
32 - 126是可印刷字符，其他的都是控制字符。

** 大端和小端

大端模式：高位字节放低位地址，低位字节放高位地址
[[file:image/image_20240902_105302.png]]

小端模式：高位字节放高位地址，低位字节放低位地址
[[file:image/image_20240902_105322.png]]

#+begin_quote 为什么会有大端和小端模式

对于早期的计算机来说，先处理低位字节效率比较高，因为计算都是从低位开始的，所以大多数计算机内部处理使用的是小端模式。但是计算机发展到现在，计算机的处理器相较于以前已经进步很多了，先处理高位还是低位字节的影响已经可以忽略，但是为了向后兼容，保留了大/小端模式。

大端模式更适合程序员阅读，因为看到的内容与输出的内容是一致的。
#+end_quote

主机基本使用小端，网络使用大端。

** 效验码

*码距* ：任意两个合法码字之间不同的二进制的位数。

码距大于等于2时，开始具有检错能力

码距越大，纠错、检错能力越强

*** 奇偶效验码

添加一个校验位，校验位的取值满足以下规定：

奇校验码：整个校验码（有效信息位和校验位）中“1”的个数为奇数。

偶校验码：整个校验码（有效信息位和校验位）中“1”的个数为偶数。

即在有效信息的前面添加1或者0即可。

*** 海明效验码



*** 循环冗余码

循环冗余码，包含数据位和效验位

效验位计算包含一个多项式来进行计算。

数据位增加效验位最高阶个 0，然后对多项式表示的二进制数进行模 2 除法，最后的余数就是效验位。

效验过程则是用循环冗余码再对多项式表示的二进制数进行模 2 除法，除数应该是 0

#+begin_quote 什么是模 2 除法
将 左移后的信息码 除以 生成多项式的二进制码。

每一次相减时，相同得0，不相同得1，没有借位。
[[file:image/image_20240902_142546.png]]
#+end_quote

** 定点数表示和运算

** 浮点数表示和运算

** 算术逻辑单元（ALU）


