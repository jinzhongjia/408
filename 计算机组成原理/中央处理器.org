* 中央处理器

CPU 由运算器和控制器组成。

控制器负责协调并控制计算机各部件执行程序的指令序列，包括取指令、分析指令和执行指令。

运算器负责对数据进行加工。

** CPU 的具体功能

1. 指令控制

   完成取指令、分析指令和执行指令的操作，即程序的顺序控制

2. 操作控制

   一条指令的功能往往由若干操作信号的组合来实现。

 CPU 管理并产生由内存取出的每条指令的操作信号，把各种操作信号送往相应的部件，从而控制这些部件按指令的要求进行动作。

3. 时间控制

4. 数据加工

5. 中断处理
   
** CPU 的基本结构

两部分：运算器和控制器

*** 运算器

接受从控制器送来的命令并执行相应的动作，对数据进行加工和处理。

运算器是计算机对数据进行加工处理的中心，它主要由 *算术逻辑单元（ALU）* 、 *暂存寄存器* 、 *累加寄存器（ACC）* 、 *通用寄存器组* 、 *程序状态字寄存器（PSW）* 、 *移位器* 、 *计数器* 等组成。

其中，通用寄存器组包含 AX、BX、CX、DX、SP 等。

SP 是堆栈指针，用于指示栈顶的地址。

程序状态字寄存器包含溢出标志（OF）、符号标志（SF）、零标志（ZF）、进位标志（
CF）等

*** 控制器

控制器是整个系统的指挥中枢。

基本功能是执行指令，每条指令的执行是由控制器发出的一组微操作实现的。

控制器有 *硬布线控制器* 和 *微程序控制器* 两种类型。

控制器由 *程序计数器（PC）* 、 *指令寄存器（IR）* 、 *指令译码器* 、 *存储器地址寄存器（MAR）* 、 *存储器数据寄存器（PC）* 、 *时序系统* 和 *微操作信号发生器* 等组成。

时序系统用于产生各种时序信号，它们都是由统一时钟（CLOCK）分频得到的。

微操作信号发生器，根据 ~IR~ 的内容、 ~PSW~ 的内容及时序信号，产生控制整个计算机系统所需的各种控制信号，有组合逻辑型和存储逻辑型两种。

**** 工作原理

根据指令操作码、指令的执行步骤（微命令序列）和条件信号形成当前计算机各部件要用到的控制信号。

计算机整机各硬件系统在这些控制信号的控制下协同运行产生预期的执行结果。

** 指令执行过程

*** 指令周期

取出一条指令并执行的时间。

指令周期常用若干机器周期来表示，一个机器周期又包含若干个时钟周期（也称 *节拍* 或者 *T周期* ）。

每个指令周期内的机器周期数可以不等，每个机器周期内的节拍数也可以不等。

一个完整的指令周期应该包括取指、间址周期、执行、中断四个周期。

该四部分均进行了访存操作。

CPU 还设置了 4 个标志触发器：FE、IND、EX、INT，分别对应取指、间址、执行、中断，以 1 状态表示有效。

堆栈一般都放在高地址，所以进栈是由高地址向低地址增加。

*** 指令周期数据流

数据流是根据指令要求依次访问的数据序列。

指令执行的不同阶段，要求依次访问的数据序列是不同的。

对于不同的指令，数据流往往也是不同的。

**** 取指周期

任务：根据 PC 从主存中取出指令代码放在 IR 中。

1. PC -> MAR -> 地址总线 -> 主存
2. CU 发出读指令 -> 控制总线 -> 主存
3. 主存 -> 数据总线 -> MDR -> IR
4. CU 发出控制信号 -> PC 内容加 1

**** 间址周期

任务：取操作数有效地址。

1. Ad(IR) 或 MDR -> MAR -> 地址总线 -> 主存
2. CU 发出读指令 -> 控制总线 -> 主存
3. 主存 -> 数据总线 -> MDR

Ad(IR) 表示取出 IR 中存放的指令字的地址字段。

**** 执行周期

任务：取操作数，根据 IR 中的指令字的操作码通过 ALU 操作产生执行结果。

不同指令的执行周期操作不同，故没有统一的数据流向。

**** 中断周期

任务：处理中断请求。

假设程序断点存入堆栈中，并用 SP 指示栈顶地址，而且进栈操作是先修改栈顶指针，后存入数据。

1. CU 控制将 SP 减 1，SP -> MAR -> 地址总线 -> 主存
2. CU 发出写命令 -> 控制总线 -> 主存
3. PC -> MDR -> 数据总线 -> 主存 ->
4. CU -> -> PC
 
*** 指令执行方案

一个指令周期通常要包括几个时间段，每个步骤完成指令的一部分功能，几个依次执行的步骤完成这条指令的全部功能。

出于性能和硬件成本等考虑，有三种不同的方案来安排指令的执行步骤

**** 单指令周期

为所有指令都选用相同的执行时间来完成。

指令之间串行执行，由于每条指令的执行时间相同，所以执行周期取决于执行耗时最常的指令。

如果出现一个执行耗时特别长的指令，会降低整个系统的运行速度（因为原本执行时间短的指令也会使用长的执行周期，一部分指令执行后系统空转，造成资源的浪费）。

**** 多指令周期

对不同类型的指令选用不同的执行步骤。

仍然串行执行，但可选用不同个数的时钟周期来完成不同指令的执行过程，指令需要几个周期就为其分配几个周期，无须要求所有指令执行占用一样的执行周期。

**** 流水线方案

指令之间可以并行，称之为流水线方案。

追求在每个时间脉冲周期完成一条指令的执行过程。

#+begin_quote
时钟脉冲周期是指计算机系统中时钟信号的一个完整周期。
在这个周期内，时钟信号从一个状态（如高电平）变化到另一个状态（如低电平），然后再返回到初始状态。
时钟脉冲周期决定了系统的工作频率，影响着数据处理的速度和同步操作的时序。通常，时钟脉冲周期越短，计算机的处理速度越快。
#+end_quote
通过在每个时钟周期启动一条指令，尽量让多条指令同时运行，但各自处在不同的执行步骤中。

** 数据通路的功能和基本结构

*** 数据通路的功能

数据在功能部件之间传送的路径称为数据通路，包括数据通路上流经的部件，例如 ALU、通用寄存器、状态寄存器、异常和中断处理逻辑等。
数据通路描述了信息从什么地方开始，中间经过哪个寄存器或多路开关，最后传送到哪个寄存器，这些都需要加以控制。

数据通路由控制部件控制，控制部件根据每条指令功能的不同生成对数据通路的控制信号。

数据通路的功能是实现CPU 内部的运算器和寄存器及寄存器之间的数据交换。

*** 基本结构

- CPU 内部单总线方式
- CPU 内部多总线方式
- 专用数据通路方式
 
**** 寄存器之间的数据传送

直接通过 CPU 内部总线完成

**** 主存和CPU 之间的数据传送

也需要使用CPU 内部总线完成。

**** 执行算术或逻辑运算

执行算术或逻辑操作时，由于 ALU 是本身没有内部存储功能的组合电路，因此如要执行假发运算，相加的两个数必须在 ALU 的两个输入端同时有效，故增加暂存器。

** 控制器功能和工作原理

主要功能：

1. 从主存中取出一条指令，指出下一条指令在主存中的位置
2. 对指令进行译码或测试，产生相应的操作控制信号，以便启动规定的动作
3. 指挥并控制 CPU、主存、输入和输出设备之间的数据流动方向。

分为硬布线控制器和微程序控制器

*** 硬布线控制器

**** 定义

硬布线控制器是通过固定的逻辑电路（如门电路、触发器等）实现控制信号的生成。这种控制器的行为是通过硬件电路直接定义的。

**** 优点：

速度快：由于是硬件实现，控制信号的生成速度非常快，适合对速度要求高的应用。

简单性：设计相对简单，逻辑电路清晰，易于理解和实现。

**** 缺点：

灵活性差：一旦设计完成，修改和扩展非常困难，无法适应新的指令集或功能。
成本高：在设计复杂的控制器时，硬件成本可能较高。
*** 微程序控制器

**** 定义

微程序控制器是通过存储在内存中的微指令来生成控制信号。这些微指令可以根据需要进行修改和更新。

**** 优点：

灵活性高：可以通过改变微程序来支持新的指令集或功能，适应性强。
易于维护：更新和修改微程序相对简单，可以通过软件手段实现。

**** 缺点

速度较慢：由于需要从内存中读取微指令，生成控制信号的速度通常比硬布线控制器慢。
复杂性：设计和实现相对复杂，需要考虑微指令的存储和管理。

** 异常和中断

异常分为故障、自陷、终止

中断分为可屏蔽中断、不可屏蔽中断

*** 异常和中断响应过程

1. 关中断
   保存断点和程序状态期间，不能被新的程序打断，因此禁止响应新的中断，关中断。
   
2. 保存断点和程序状态
   保证在处理后正确回到被中断的程序继续执行，
   
3. 识别异常和中断并转到相应的处理程序
   软件识别和硬件识别（向量中断）两种

** 指令流水线

将指令执行过程划分为不同的阶段，占用不同的资源，使得多条指令同时执行。

属于时间上并行，将一个任务分解为几个不同的子阶段，每个阶段在不同的功能部件上并行执行。

*** 性能指标

吞吐率

加速比

效率

*** 影响因素

**** 结构冲突

结构相关：由于多条指令在同一时刻争用同一资源（主存、寄存器等）而形成的冲突

解决方案
后一相关指令暂停一周期

资源重复配置：数据存储器+指令存储器分开存储

**** 数据冲突

在一个程序中，存在必须等待前一条指令执行完才能执行后一条指令的情况，则这两条指令即为数据相关。

解决方案
- 把遇到数据相关的指令及其后续指令都暂停一至几个时钟周期，直到数据相关问题消失后再继续执行

  - 硬件阻塞（stall）
  - 软件插入空操作NOP

- 数据旁路技术：通过数据旁路直接将ALU的运算结果接回为下一条操作的输入

- 编译优化：通过编译器调整指令顺序来解决数据相关

**** 控制冲突

当流水线遇到转移指令和其他改变PC值的指令而造成断流时，会引起控制相关

解决方案

- 转移指令分支预测

  - 简单预测

  - 动态预测

- 预取转移成功和不成功两个控制流方向上的目标指令

- 加快和提前形成条件码

- 提高转移方向的猜准率

- 在分支指令插入空操作

*** 流水线分类

**** 根据流水线使用的级别

部件功能级流水线：将复杂的算术逻辑运算组成流水线工作方式

处理机级流水线：把一条指令解释过程分为多个子过程

处理机间级流水线：协调不同处理机间的不同任务

**** 根据流水线可以完成的功能

单功能流水线：只能实现一种固定的专门功能

多功能流水线：通过各段间的不同连接方式可以同时或不同时地实现多种功能

**** 根据同一时间内各段之间的连接方式

静态流水线：同一时间内，流水线的各段只能按同一种功能的连接方式工作

动态流水线：同一时间内，当某些段正在实现某种运算时，另一写段可以进行另一种运算

**** 根据各个功能段之间是否有反馈信号

线性流水线：从输入到输出，每个功能段只允许经过一次，不存在反馈回路

非线性流水线：存在反馈回路，从输入到输出过程中，某些功能段将数次通过流水线，这种流水线适合进行线性递归的运算


*** 流水线多发技术

**** 超标量技术

空分复用，每个时钟周期内可并发多条独立指令。

**** 超流水技术

时分复用，将一个时钟周期内再分段，一个功能部件使用多次

**** 超长指令字

尝试将多条能并行的指令组合成为一条


**  多处理器

*** 单指令流单数据流 SISD

***** 特性

各指令只能并发，不能并行

每条指令处理一两个数据

不是数据级并行技术

***** 硬件组成

一个处理器、一个主存储器

实现指令流水线需要多个功能性部件，采用多模块交叉存储器

*** 单指令流多数据流 SIMD

**** 特性

各指令只能并发，不能并行

每条指令可以同时处理多个具有相同特征的数据，如for循环数组计算等

是数据级并行技术

**** 硬件组成

一个控制部件（CU）

多个执行单元（如ALU）：不同执行单元同时执行一条指令，处理不同数据

多个局部存储器

一个主存储器

*** 多指令流单数据流 MISD

实际上并不存在

*** 多指令流多数据流 MIMD

**** 特性

指令可以并行

是线程级并行技术

**** 进一步分类

***** 多处理器系统

各处理器之间可以访问同一个主存

可以通过主存相互传递数据

多个处理器、一个主存储器

***** 多计算机系统

不能直接访问对方的主存

通过消息传递来共享数据

*** 向量处理器

**** 特性

- 是SIMD的变种

- 处理的数据为向量

- 擅长向量计算、大型浮点运算等

**** 硬件组成

- 多个处理单元、多组向量寄存器

- 主存采用多端口同时读取的多模块交叉存储器

- 需要大容量、集中式的主存储器

*** 多核处理器

也就是共享内存多处理器

将多个处理单元集成到单个 CPU 中，每个处理单元称为一个核。

每个核可以有自己的 cache，也可以共享同一个 cache。

所有核一般是对称的，并且共享主存储器，因此多核属于共享存储的对称处理器。

| UMA                  | NUMA                       |
|----------------------+----------------------------|
| 多处理器访问同一内存 | 优先给CPU 分配最接近的内存 |
| 运算扩展性差         | 运算扩展性强               |
| 有cache 一致性问题   |                            |

*** 硬件多线程

- 处理器中存在多个IR、功能部件、寄存器组，那么可恶意支持硬件多线程

- 线程切换时不用再话费开销保存和恢复现场

  [[file:image/image_20240826_230114.png]]
